{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pawel/Desktop/1-licznik-z-ustawianym-krokiem/src/Counter.js\";\nimport React, { Component } from 'react';\nimport './Counter.css';\nimport Display from './Display';\nimport ButtonsPanel from './ButtonsPanel';\nimport Step from './Step';\n\nclass Counter extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addOne = () => {\n      this.setState(prevState => {\n        return {\n          counterValue: prevState.counterValue + 1\n        };\n      });\n    };\n\n    this.addStep = event => {\n      this.setState(prevState => {\n        return {\n          counterValue: prevState.counterValue + parseInt(this.state.stepValue)\n        };\n      });\n      event.preventDefault();\n    };\n\n    this.updateStep = event => {\n      console.log(event.target.value);\n      this.setState({\n        stepValue: event.target.value\n      });\n    };\n\n    this.reset = resetBool => {\n      if (resetBool) {\n        this.setState({\n          counterValue: 0\n        });\n      } else {\n        this.setState({\n          counterValue: this.props.initValue\n        });\n      }\n    };\n\n    this.changeValue = action => {\n      // ES6 method\n      this.setState((prevState, prevProps) => {\n        let currentCounterValue = prevState.counterValue;\n\n        if (action === 'add') {\n          currentCounterValue += 1;\n        } else if (action === 'reinit') {\n          currentCounterValue = prevProps.initValue;\n        } else {\n          currentCounterValue = 0;\n        }\n\n        return {\n          counterValue: currentCounterValue\n        };\n      });\n    };\n\n    if (!isNaN(this.props.initValue)) {\n      initValue = parseInt(this.props.initValue);\n    }\n\n    this.state = {\n      counterValue: initValue,\n      stepValue: ''\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"counter\",\n      children: [\"Licznik:\", /*#__PURE__*/_jsxDEV(Display, {\n        displayValue: this.state.counterValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ButtonsPanel, {\n        buttonMethod: this.changeValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Step, {\n        updateStepTyping: this.updateStep,\n        changeValueWithStep: this.addStep,\n        stepValue: this.state.stepValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Counter; // class Counter extends Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             counterValue: this.props.initValue\n//         };\n//         // binding needed when this.changeValue is a ES5 method\n//         // this.changeValue = this.changeValue.bind(this);\n//     }\n// //changeValue() { // ES5 method (no this context by default)\n// changeValue = (action) => { // ES6 method\n//     this.setState((prevState, prevProps) => {\n//         let currentCounterValue = prevState.counterValue;\n//         if (action === 'add') {\n//             currentCounterValue += 1;\n//         } else if (action === 'reinit') {\n//             currentCounterValue = prevProps.initValue;\n//         } else {\n//             currentCounterValue = 0;\n//         }\n//         return({\n//             counterValue: currentCounterValue\n//         });\n//     });\n// }\n// render() {\n//     return (\n//         <div className=\"counter\">\n//             Counter:\n//             <Display displayValue={this.state.counterValue} />\n//             <ButtonsPanel buttonMethod={this.changeValue} />\n//             <Step  />\n//         </div>\n//     );\n// }\n// }\n// export default Counter;\n// function Counter(props) {\n//     let randomNumber = Math.floor(Math.random() * (108 - 1 + 1) + 1);\n//     return (\n//         <div className=\"counter\">\n//             Counter:\n//             <span className=\"value\">\n//                 {props.initValue}\n//             </span>\n//         </div>\n//     );\n// }\n// export default Counter;","map":{"version":3,"sources":["/Users/pawel/Desktop/1-licznik-z-ustawianym-krokiem/src/Counter.js"],"names":["React","Component","Display","ButtonsPanel","Step","Counter","constructor","props","addOne","setState","prevState","counterValue","addStep","event","parseInt","state","stepValue","preventDefault","updateStep","console","log","target","value","reset","resetBool","initValue","changeValue","action","prevProps","currentCounterValue","isNaN","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './Counter.css';\n\nimport Display from './Display';\nimport ButtonsPanel from './ButtonsPanel';\nimport Step from './Step';\n\nclass Counter extends Component {\n\n    constructor (props) {\n        super(props);\n\n        if(!isNaN(this.props.initValue)) {\n            initValue = parseInt(this.props.initValue);\n        }\n\n        this.state = {\n            counterValue: initValue,\n            stepValue: ''\n        };       \n\n    }\n\n    addOne = () => {\n        this.setState(prevState=>{\n            return({counterValue: prevState.counterValue + 1});\n        })\n    }\n\n    addStep = (event) => {\n        this.setState(prevState=>{\n            return({counterValue: prevState.counterValue + parseInt(this.state.stepValue)});\n        })\n        event.preventDefault();\n    }\n\n    updateStep = event => {\n        console.log(event.target.value);\n        this.setState({stepValue: event.target.value})\n    }\n\n    reset = resetBool => {\n        if(resetBool) {\n            this.setState({counterValue: 0})\n        } else {\n            this.setState({counterValue: this.props.initValue})\n        }\n    }\n\n    //changeValue() { // ES5 method (no this context by default)\n    changeValue = (action) => { // ES6 method\n\n        this.setState((prevState, prevProps) => {\n            \n            let currentCounterValue = prevState.counterValue;\n\n            if (action === 'add') {\n                currentCounterValue += 1;\n            } else if (action === 'reinit') {\n                currentCounterValue = prevProps.initValue;\n            } else {\n                currentCounterValue = 0;\n            }\n\n            return({\n                counterValue: currentCounterValue\n            });\n\n            \n        });\n    }\n\n    render() {\n\n        return (\n            <div className=\"counter\">\n                Licznik:\n                <Display displayValue={this.state.counterValue} />\n                <ButtonsPanel buttonMethod={this.changeValue} />\n                <Step updateStepTyping={this.updateStep} changeValueWithStep={this.addStep} stepValue={this.state.stepValue}/>\n\n            </div>\n        );\n    }\n}\n\nexport default Counter;\n\n// class Counter extends Component {\n\n//     constructor(props) {\n//         super(props);\n\n//         this.state = {\n//             counterValue: this.props.initValue\n//         };\n\n//         // binding needed when this.changeValue is a ES5 method\n//         // this.changeValue = this.changeValue.bind(this);\n//     }\n\n    // //changeValue() { // ES5 method (no this context by default)\n    // changeValue = (action) => { // ES6 method\n\n    //     this.setState((prevState, prevProps) => {\n            \n    //         let currentCounterValue = prevState.counterValue;\n\n    //         if (action === 'add') {\n    //             currentCounterValue += 1;\n    //         } else if (action === 'reinit') {\n    //             currentCounterValue = prevProps.initValue;\n    //         } else {\n    //             currentCounterValue = 0;\n    //         }\n\n    //         return({\n    //             counterValue: currentCounterValue\n    //         });\n\n            \n    //     });\n    // }\n\n    // render() {\n\n    //     return (\n    //         <div className=\"counter\">\n    //             Counter:\n    //             <Display displayValue={this.state.counterValue} />\n    //             <ButtonsPanel buttonMethod={this.changeValue} />\n    //             <Step  />\n\n    //         </div>\n    //     );\n    // }\n// }\n\n// export default Counter;\n\n// function Counter(props) {\n\n//     let randomNumber = Math.floor(Math.random() * (108 - 1 + 1) + 1);\n\n//     return (\n//         <div className=\"counter\">\n//             Counter:\n//             <span className=\"value\">\n//                 {props.initValue}\n//             </span>\n//         </div>\n//     );\n// }\n\n// export default Counter;\n\n"]},"metadata":{},"sourceType":"module"}